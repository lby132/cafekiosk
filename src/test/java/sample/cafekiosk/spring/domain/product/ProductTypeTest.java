package sample.cafekiosk.spring.domain.product;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import org.junit.jupiter.params.ParameterizedTest;import org.junit.jupiter.params.provider.Arguments;import org.junit.jupiter.params.provider.CsvSource;import org.junit.jupiter.params.provider.MethodSource;import java.util.stream.Stream;import static org.assertj.core.api.Assertions.assertThat;import static org.junit.jupiter.api.Assertions.*;class ProductTypeTest {    @DisplayName("상품 타입이 재고 관련 타입인지를 체크한다.")    @Test    void containStockType() {        // given        ProductType givenType = ProductType.HANDMADE;        // when        boolean result = ProductType.containStockType(givenType);        // then        assertThat(result).isFalse();    }    @DisplayName("상품 타입이 재고 관련 타입인지를 체크한다.")    @Test    void containStockType2() {        // given        ProductType givenType = ProductType.BAKERY;        // when        boolean result = ProductType.containStockType(givenType);        // then        assertThat(result).isTrue();    }    @DisplayName("상품 타입이 재고 관련 타입인지를 체크한다.")    @Test    void containStockType3() {        // given        ProductType givenType1 = ProductType.HANDMADE;        ProductType givenType2 = ProductType.BOTTLE;        ProductType givenType3 = ProductType.BAKERY;        // when        boolean result1 = ProductType.containStockType(givenType1);        boolean result2 = ProductType.containStockType(givenType2);        boolean result3 = ProductType.containStockType(givenType3);        // then        assertThat(result1).isFalse();        assertThat(result2).isTrue();        assertThat(result3).isTrue();    }    //@Test 대신 파라미터를 이용한 @ParameterizedTest 사용    @DisplayName("상품 타입이 재고 관련 타입인지를 체크한다.")    @CsvSource({"HANDMADE,false","BOTTLE,true","BAKERY,true"})    @ParameterizedTest    void containStockType4(ProductType productType, boolean expected) {        // when        boolean result = ProductType.containStockType(productType);        // then        assertThat(result).isEqualTo(expected);    }    private static Stream<Arguments> provideProductTypesForCheckingStockType() {        return Stream.of(                Arguments.of(ProductType.HANDMADE, false),                Arguments.of(ProductType.BOTTLE, true),                Arguments.of(ProductType.BAKERY, true)        );    }    @DisplayName("상품 타입이 재고 관련 타입인지를 체크한다.")    @MethodSource("provideProductTypesForCheckingStockType")    @ParameterizedTest    void containsStockType5(ProductType productType, boolean expected) {        // when        boolean result = ProductType.containStockType(productType);        // then        assertThat(result).isEqualTo(expected);    }}